[{"path":"https://greta-dev.github.io/greta.gam/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to greta.gam","title":"Contributing to greta.gam","text":"outlines propose change greta.gam. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://greta-dev.github.io/greta.gam/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to greta.gam","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://greta-dev.github.io/greta.gam/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to greta.gam","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://greta-dev.github.io/greta.gam/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to greta.gam","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"greta-dev/greta.gam\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://greta-dev.github.io/greta.gam/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to greta.gam","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://greta-dev.github.io/greta.gam/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to greta.gam","text":"Please note greta.gam project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://greta-dev.github.io/greta.gam/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://greta-dev.github.io/greta.gam/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nick Golding. Author, copyright holder. Nicholas Tierney. Author, maintainer. David L Miller. Author.","code":""},{"path":"https://greta-dev.github.io/greta.gam/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Golding N, Tierney N, Miller D (2024). greta.gam: Generalised Additive Models greta using 'mgcv'. R package version 0.1.0, https://greta-dev.github.io/greta.gam/, https://github.com/greta-dev/greta.gam.","code":"@Manual{,   title = {greta.gam: Generalised Additive Models in greta using 'mgcv'},   author = {Nick Golding and Nicholas Tierney and David L Miller},   year = {2024},   note = {R package version 0.1.0, https://greta-dev.github.io/greta.gam/},   url = {https://github.com/greta-dev/greta.gam}, }"},{"path":"https://greta-dev.github.io/greta.gam/index.html","id":"gretagam-generalised-additive-models-in-greta-using-mgcv","dir":"","previous_headings":"","what":"Generalised Additive Models in greta using mgcv","title":"Generalised Additive Models in greta using mgcv","text":"greta.gam lets use mgcv’s smoother functions formula syntax define smooth terms use greta model. can define likelihood complete model, fit MCMC. design architecture package done Nick Golding, David L Miller.","code":""},{"path":"https://greta-dev.github.io/greta.gam/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generalised Additive Models in greta using mgcv","text":"can install development version greta.gam R-universe : can install CRAN :","code":"install.packages(\"greta.gam\", repos = c(\"https://greta-dev.r-universe.dev\", \"https://cloud.r-project.org\")) install.packages(\"greta.gam\")"},{"path":"https://greta-dev.github.io/greta.gam/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generalised Additive Models in greta using mgcv","text":"’s simple example adapted mgcv ?gam help file: mgcv: Now fitting model greta:","code":"library(mgcv) #> Loading required package: nlme #> This is mgcv 1.9-1. For overview type 'help(\"mgcv-package\")'. set.seed(2)  # simulate some data... dat <- gamSim(1, n = 400, dist = \"normal\", scale = 0.3) #> Gu & Wahba 4 term additive model  # fit a model using gam() b <- gam(y ~ s(x2), data = dat) library(greta.gam) #> Loading required package: greta #>  #> Attaching package: 'greta' #> The following objects are masked from 'package:stats': #>  #>     binomial, cov2cor, poisson #> The following objects are masked from 'package:base': #>  #>     %*%, apply, backsolve, beta, chol2inv, colMeans, colSums, diag, #>     eigen, forwardsolve, gamma, identity, rowMeans, rowSums, sweep, #>     tapply set.seed(2024 - 02 - 09) # setup the linear predictor for the smooth z <- smooths(~ s(x2), data = dat) #> ℹ Initialising python and checking dependencies, this may take a moment. #> ✔ Initialising python and checking dependencies ... done!                 # set the distribution of the response distribution(dat$y) <- normal(z, 1)  # make some prediction data pred_dat <- data.frame(x2 = seq(0, 1, length.out = 100))  # z_pred stores the predictions z_pred <- evaluate_smooths(z, newdata = pred_dat)  # build model m <- model(z_pred)  # draw from the posterior draws <- mcmc(m, n_samples = 200) #> running 4 chains simultaneously on up to 8 CPU cores #>     warmup                                           0/1000 | eta:  ?s              warmup ==                                       50/1000 | eta: 27s              warmup ====                                    100/1000 | eta: 15s              warmup ======                                  150/1000 | eta: 10s              warmup ========                                200/1000 | eta:  8s              warmup ==========                              250/1000 | eta:  7s              warmup ===========                             300/1000 | eta:  6s              warmup =============                           350/1000 | eta:  5s              warmup ===============                         400/1000 | eta:  4s              warmup =================                       450/1000 | eta:  4s              warmup ===================                     500/1000 | eta:  3s              warmup =====================                   550/1000 | eta:  3s              warmup =======================                 600/1000 | eta:  2s              warmup =========================               650/1000 | eta:  2s              warmup ===========================             700/1000 | eta:  2s              warmup ============================            750/1000 | eta:  1s              warmup ==============================          800/1000 | eta:  1s              warmup ================================        850/1000 | eta:  1s              warmup ==================================      900/1000 | eta:  1s              warmup ====================================    950/1000 | eta:  0s              warmup ====================================== 1000/1000 | eta:  0s           #>   sampling                                            0/200 | eta:  ?s            sampling ==========                                50/200 | eta:  0s            sampling ===================                      100/200 | eta:  0s            sampling ============================             150/200 | eta:  0s            sampling ======================================   200/200 | eta:  0s  # plot the mgcv fit plot(b, scheme = 1, shift = coef(b)[1])  # add in a line for each posterior sample apply(draws[[1]], 1, lines, x = pred_dat$x2, col = \"blue\") #> NULL  # plot the data points(dat$x2, dat$y, pch = 19, cex = 0.2)"},{"path":"https://greta-dev.github.io/greta.gam/index.html","id":"brief-technical-details","dir":"","previous_headings":"","what":"Brief technical details","title":"Generalised Additive Models in greta using mgcv","text":"greta.gam uses tricks jagam (Wood, 2016) routine mgcv get things work. brief details interested internal workings.","code":""},{"path":"https://greta-dev.github.io/greta.gam/index.html","id":"bayesian-interpretation-of-the-gam","dir":"","previous_headings":"Brief technical details","what":"Bayesian interpretation of the GAM","title":"Generalised Additive Models in greta using mgcv","text":"GAMs models Bayesian interpretations (even fitted using “frequentist” methods). One can think smoother penalty matrix prior precision matrix Bayesian random effects model. Design matrices constructed exactly frequentist case. See Miller (2021) background .","code":""},{"path":"https://greta-dev.github.io/greta.gam/index.html","id":"penalty-matrices","dir":"","previous_headings":"Brief technical details","what":"Penalty matrices","title":"Generalised Additive Models in greta using mgcv","text":"slight difficulty Bayesian interpretation GAM , naïve form priors improper nullspace penalty (1D case, usually linear term). get proper priors can use one “tricks” employed Marra & Wood (2011) – somehow penalise parts penalty lead improper prior. take option provided jagam create additional penalty matrix terms (eigen-decomposition penalty matrix; see Marra & Wood, 2011).","code":""},{"path":"https://greta-dev.github.io/greta.gam/index.html","id":"references","dir":"","previous_headings":"Brief technical details","what":"References","title":"Generalised Additive Models in greta using mgcv","text":"Marra, G Wood, SN (2011) Practical variable selection generalized additive models. Computational Statistics Data Analysis, 55, 2372–2387. Miller DL (2021). Bayesian views generalized additive modelling. arXiv. Wood, SN (2016) Just Another Gibbs Additive Modeler: Interfacing JAGS mgcv. Journal Statistical Software 75, . 7","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/evaluate_smooths.html","id":null,"dir":"Reference","previous_headings":"","what":"evaluate smooths at new data — evaluate_smooths","title":"evaluate smooths at new data — evaluate_smooths","text":"Evaluate set smooths new data locations","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/evaluate_smooths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"evaluate smooths at new data — evaluate_smooths","text":"","code":"evaluate_smooths(x, newdata)"},{"path":"https://greta-dev.github.io/greta.gam/reference/evaluate_smooths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"evaluate smooths at new data — evaluate_smooths","text":"x greta array created greta.gam::smooths newdata dataframe column names datatypes used create x, data evauate smooths","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/evaluate_smooths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"evaluate smooths at new data — evaluate_smooths","text":"greta array","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/evaluate_smooths.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"evaluate smooths at new data — evaluate_smooths","text":"Nick Golding","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/evaluate_smooths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"evaluate smooths at new data — evaluate_smooths","text":"","code":"if (FALSE) { # \\dontrun{ n <- 30 x <- runif(n, 0, 10) f <- function(x) {   sin(x * 2) + 1.6 * (x < 3) - 1.4 * (x > 7) } y <- f(x) + rnorm(n, 0, 0.3) x_plot <- seq(0, 10, length.out = 200)  z <- smooths(~ s(x), data = data.frame(x = x))  distribution(y) <- normal(z, 0.3)  z_pred <- evaluate_smooths(z, newdata = data.frame(x = x_plot))  z_pred } # }"},{"path":"https://greta-dev.github.io/greta.gam/reference/greta.gam.html","id":null,"dir":"Reference","previous_headings":"","what":"greta.gam: generalised additive models in greta using mgcv — greta.gam","title":"greta.gam: generalised additive models in greta using mgcv — greta.gam","text":"greta.gam module greta lets use mgcv's smoother functions formula syntax define smooth terms use greta model. can define likelihood complete model, fit MCMC.","code":""},{"path":[]},{"path":"https://greta-dev.github.io/greta.gam/reference/greta.gam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"greta.gam: generalised additive models in greta using mgcv — greta.gam","text":"Maintainer: Nicholas Tierney nicholas.tierney@gmail.com (ORCID) Authors: Nick Golding nick.golding.research@gmail.com (ORCID) David L Miller dave@ninepointeightone.net","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/jagam2greta.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a jagam model definition into a greta model definition — jagam2greta","title":"Turn a jagam model definition into a greta model definition — jagam2greta","text":"Takes GAM defined formula returns corresponding greta model via power jagam. Response variable generated dummy data used.","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/jagam2greta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a jagam model definition into a greta model definition — jagam2greta","text":"","code":"jagam2greta(formula, data, newdata, sp = NULL, knots = NULL, tol = 0)"},{"path":"https://greta-dev.github.io/greta.gam/reference/jagam2greta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a jagam model definition into a greta model definition — jagam2greta","text":"formula GAM formula representing smooth terms, mgcv::gam(). right hand side fo formula used. data data frame list containing covariates required formula. covariates greta arrays. newdata new dataset sp optional vector smoothing parameters, two per smooth term model, order formula. sp = NULL, smoothing parameters learned, otherwise smoothing parameters must specified user. smoothing parameters may either numeric vector greta array (variable). knots optional list containing user specified knot values used basis construction, mgcv::gam() knots greta arrays. tol non-negative scalar numerical tolerance parameter. can try increasing model numerical stability issues","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/jagam2greta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a jagam model definition into a greta model definition — jagam2greta","text":"list following elements: betas greta array coefficients estimated (appropriate priors applied), X design matrix model, X_pred prediction matrix.","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/jagam2greta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a jagam model definition into a greta model definition — jagam2greta","text":"","code":"if (FALSE) { # \\dontrun{ n <- 30  x <- runif(n, 0, 10)  f <- function(x) {   sin(x * 2) + 1.6 * (x < 3) - 1.4 * (x > 7) }  y <- f(x) + rnorm(n, 0, 0.3)  x_plot <- seq(0, 10, length.out = 200)  jagam2greta(   formula = ~ s(x),   data = data.frame(x = x),   tol = 0 ) } # }"},{"path":"https://greta-dev.github.io/greta.gam/reference/smooths.html","id":null,"dir":"Reference","previous_headings":"","what":"greta array representations of mgcv smooth terms — smooths","title":"greta array representations of mgcv smooth terms — smooths","text":"smooths translates right hand side mgcv GAM formula corresponding Bayesian representation smooth terms. formula may include multiple combined smooths different types, well fixed effect terms intercepts. resulting greta array representing combined smooth can used greta model.","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/smooths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"greta array representations of mgcv smooth terms — smooths","text":"","code":"smooths(formula, data = list(), knots = NULL, sp = NULL, tol = 0)"},{"path":"https://greta-dev.github.io/greta.gam/reference/smooths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"greta array representations of mgcv smooth terms — smooths","text":"formula GAM formula representing smooth terms, mgcv::gam(). right hand side fo formula used. data data frame list containing covariates required formula. covariates greta arrays. knots optional list containing user specified knot values used basis construction, mgcv::gam() knots greta arrays. sp optional vector smoothing parameters, two per smooth term model, order formula. sp = NULL, smoothing parameters learned, otherwise smoothing parameters must specified user. smoothing parameters may either numeric vector greta array (variable). tol non-negative scalar numerical tolerance parameter. can try increasing model numerical stability issues","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/smooths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"greta array representations of mgcv smooth terms — smooths","text":"Object class \"greta_array\".","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/smooths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"greta array representations of mgcv smooth terms — smooths","text":"right hand side formula used define smooth terms. user must complete gam model specifying link likelihood term greta. warning issued formula left hand side. Note default, GAM formulas add intercept term. already specified intercept greta model, can remove intercept smooth term adding -1 term formula. Like mgcv::jagam(), smooths translates mgcv GAM formula Bayesian representation smooth terms, using GAM smoothing penalty matrix multivariate normal prior penalise model fitting. Unlike gam, smooths perform integration required penalise model fitting. model must fitted MCMC carry integration - make sense maximum likelihood optimisation greta model uses smooths.","code":""},{"path":"https://greta-dev.github.io/greta.gam/reference/smooths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"greta array representations of mgcv smooth terms — smooths","text":"","code":"if (FALSE) { # \\dontrun{ n <- 30 x <- runif(n, 0, 10) f <- function(x) {   sin(x * 2) + 1.6 * (x < 3) - 1.4 * (x > 7) } y <- f(x) + rnorm(n, 0, 0.3) x_plot <- seq(0, 10, length.out = 200)  z <- smooths(~ s(x), data = data.frame(x = x))  distribution(y) <- normal(z, 0.3)  z_pred <- evaluate_smooths(z, newdata = data.frame(x = x_plot))  # build model m <- model(z_pred) draws <- mcmc(m, n_samples = 100)  plot(x, y, pch = 19, cex = 0.4, col = \"red\") apply(draws[[1]], 1, lines, x = x_plot, col = \"blue\") points(x, y, pch = 19, cex = 0.4, col = \"red\") } # }"},{"path":"https://greta-dev.github.io/greta.gam/news/index.html","id":"gretagam-010","dir":"Changelog","previous_headings":"","what":"greta.gam 0.1.0","title":"greta.gam 0.1.0","text":"Initial CRAN submission.","code":""}]
